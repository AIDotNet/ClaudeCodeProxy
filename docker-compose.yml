version: '3.8'

services:
  # ============================================================================
  # ClaudeCodeProxy Application
  # ============================================================================
  claudecodeproxy:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: claudecodeproxy:latest
    container_name: claudecodeproxy-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - TZ=UTC
    volumes:
      # Persistent data storage
      - ./data:/app/data
      # Optional: Custom configuration
      - ./config/appsettings.Production.json:/app/appsettings.Production.json:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.claudecodeproxy.rule=Host(`claudecodeproxy.local`)"
      - "traefik.http.services.claudecodeproxy.loadbalancer.server.port=8080"
    networks:
      - claudecodeproxy-network

  # ============================================================================
  # Reverse Proxy (Optional - Traefik)
  # ============================================================================
  traefik:
    image: traefik:v3.0
    container_name: claudecodeproxy-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"  # Traefik dashboard
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=admin@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.local`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    networks:
      - claudecodeproxy-network
    profiles:
      - proxy

  # ============================================================================
  # Monitoring (Optional - Prometheus & Grafana)
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: claudecodeproxy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - claudecodeproxy-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: claudecodeproxy-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - claudecodeproxy-network
    profiles:
      - monitoring

  # ============================================================================
  # Log Aggregation (Optional - ELK Stack)
  # ============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: claudecodeproxy-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - claudecodeproxy-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: claudecodeproxy-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - claudecodeproxy-network
    profiles:
      - logging

# ============================================================================
# Networks
# ============================================================================
networks:
  claudecodeproxy-network:
    driver: bridge
    name: claudecodeproxy-network

# ============================================================================
# Volumes
# ============================================================================
volumes:
  prometheus-data:
    name: claudecodeproxy-prometheus-data
  grafana-data:
    name: claudecodeproxy-grafana-data
  elasticsearch-data:
    name: claudecodeproxy-elasticsearch-data