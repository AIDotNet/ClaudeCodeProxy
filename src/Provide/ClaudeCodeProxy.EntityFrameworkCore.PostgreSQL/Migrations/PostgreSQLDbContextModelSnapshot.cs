// <auto-generated />
using System;
using ClaudeCodeProxy.EntityFrameworkCore.PostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClaudeCodeProxy.EntityFrameworkCore.PostgreSQL.Migrations
{
    [DbContext(typeof(PostgreSQLDbContext))]
    partial class PostgreSQLDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClaudeCodeProxy.Domain.Accounts", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("shared");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ApiUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ClaudeAiOauth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("GeminiOauth")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("boolean");

                    b.Property<string>("LastError")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MaxConcurrentUsers")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OpenAiOauth")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(50);

                    b.Property<string>("ProjectId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Proxy")
                        .HasColumnType("TEXT");

                    b.Property<int>("RateLimitDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<DateTime?>("RateLimitedUntil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("active");

                    b.Property<string>("SupportedModels")
                        .HasColumnType("TEXT");

                    b.Property<long>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AccountType")
                        .HasDatabaseName("IX_Accounts_AccountType");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Accounts_CreatedAt");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("IX_Accounts_IsEnabled");

                    b.HasIndex("IsGlobal")
                        .HasDatabaseName("IX_Accounts_IsGlobal");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Accounts_Name");

                    b.HasIndex("OwnerUserId")
                        .HasDatabaseName("IX_Accounts_OwnerUserId");

                    b.HasIndex("Platform")
                        .HasDatabaseName("IX_Accounts_Platform");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Accounts_Priority");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Accounts_Status");

                    b.HasIndex("IsGlobal", "IsEnabled", "Status")
                        .HasDatabaseName("IX_Accounts_Global_Enabled_Status");

                    b.HasIndex("Platform", "IsEnabled", "Status")
                        .HasDatabaseName("IX_Accounts_Platform_IsEnabled_Status");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.Announcement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BackgroundColor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("bg-blue-50");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TextColor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("text-blue-800");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Announcements_CreatedAt");

                    b.HasIndex("EndTime")
                        .HasDatabaseName("IX_Announcements_EndTime");

                    b.HasIndex("IsVisible")
                        .HasDatabaseName("IX_Announcements_IsVisible");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Announcements_Priority");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("IX_Announcements_StartTime");

                    b.HasIndex("IsVisible", "Priority", "CreatedAt")
                        .HasDatabaseName("IX_Announcements_IsVisible_Priority_CreatedAt");

                    b.ToTable("Announcements", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountBindings")
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedClients")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ClaudeAccountId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClaudeConsoleAccountId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ConcurrencyLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("DailyCostLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("DailyCostUsed")
                        .HasColumnType("numeric");

                    b.Property<string>("DefaultAccountId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EnableClientRestriction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnableModelRestriction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GeminiAccountId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("MonthlyCostLimit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MonthlyCostUsed")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("all");

                    b.Property<int?>("RateLimitRequests")
                        .HasColumnType("integer");

                    b.Property<int?>("RateLimitWindow")
                        .HasColumnType("integer");

                    b.Property<string>("RestrictedModels")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("claude");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("TokenLimit")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalCostLimit")
                        .HasColumnType("numeric");

                    b.Property<long>("TotalUsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ApiKeys_CreatedAt");

                    b.HasIndex("DefaultAccountId")
                        .HasDatabaseName("IX_ApiKeys_DefaultAccountId");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("IX_ApiKeys_IsEnabled");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_ApiKeys_Name");

                    b.HasIndex("Service")
                        .HasDatabaseName("IX_ApiKeys_Service");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ApiKeys_UserId");

                    b.ToTable("ApiKeys", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NewValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("success");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("IX_AuditLogs_Action");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AuditLogs_CreatedAt");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("IX_AuditLogs_ResourceId");

                    b.HasIndex("ResourceType")
                        .HasDatabaseName("IX_AuditLogs_ResourceType");

                    b.HasIndex("Result")
                        .HasDatabaseName("IX_AuditLogs_Result");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AuditLogs_UserId");

                    b.HasIndex("Action", "CreatedAt")
                        .HasDatabaseName("IX_AuditLogs_Action_CreatedAt");

                    b.HasIndex("ResourceType", "ResourceId")
                        .HasDatabaseName("IX_AuditLogs_ResourceType_ResourceId");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("IX_AuditLogs_UserId_CreatedAt");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.InvitationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InvitationCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<DateTime>("InvitedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("InvitedReward")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("InvitedUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("InviterReward")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("InviterUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("RewardProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("InvitationCode")
                        .HasDatabaseName("IX_InvitationRecords_InvitationCode");

                    b.HasIndex("InvitedAt")
                        .HasDatabaseName("IX_InvitationRecords_InvitedAt");

                    b.HasIndex("InvitedUserId")
                        .HasDatabaseName("IX_InvitationRecords_InvitedUserId");

                    b.HasIndex("InviterUserId")
                        .HasDatabaseName("IX_InvitationRecords_InviterUserId");

                    b.HasIndex("RewardProcessed")
                        .HasDatabaseName("IX_InvitationRecords_RewardProcessed");

                    b.HasIndex("InviterUserId", "InvitedAt")
                        .HasDatabaseName("IX_InvitationRecords_InviterUserId_InvitedAt");

                    b.ToTable("InvitationRecords", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.InvitationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("IX_InvitationSettings_Key");

                    b.ToTable("InvitationSettings", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.ModelPricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CacheReadPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,9)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CacheWritePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,9)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("USD");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("InputPrice")
                        .HasColumnType("decimal(18,9)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("OutputPrice")
                        .HasColumnType("decimal(18,9)");

                    b.HasKey("Id");

                    b.HasIndex("Currency")
                        .HasDatabaseName("IX_ModelPricings_Currency");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("IX_ModelPricings_IsEnabled");

                    b.HasIndex("Model")
                        .IsUnique()
                        .HasDatabaseName("IX_ModelPricings_Model");

                    b.ToTable("ModelPricings", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.RedeemCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("balance");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UsedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_RedeemCodes_Code");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("IX_RedeemCodes_CreatedByUserId");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RedeemCodes_ExpiresAt");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("IX_RedeemCodes_IsEnabled");

                    b.HasIndex("IsUsed")
                        .HasDatabaseName("IX_RedeemCodes_IsUsed");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_RedeemCodes_Type");

                    b.HasIndex("UsedByUserId")
                        .HasDatabaseName("IX_RedeemCodes_UsedByUserId");

                    b.HasIndex("IsUsed", "IsEnabled", "ExpiresAt")
                        .HasDatabaseName("IX_RedeemCodes_IsUsed_IsEnabled_ExpiresAt");

                    b.ToTable("RedeemCodes", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.RequestLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AccountName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ApiKeyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ApiKeyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("CacheCreateTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("CacheReadTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ClientIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<decimal>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,6)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnType("integer");

                    b.Property<int>("InputTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsStreaming")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Metadata")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OutputTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Platform")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("claude");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("RequestEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RequestHour")
                        .HasColumnType("integer");

                    b.Property<string>("RequestId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RequestStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("success");

                    b.Property<int>("TotalTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApiKeyId")
                        .HasDatabaseName("IX_RequestLogs_ApiKeyId");

                    b.HasIndex("Model")
                        .HasDatabaseName("IX_RequestLogs_Model");

                    b.HasIndex("Platform")
                        .HasDatabaseName("IX_RequestLogs_Platform");

                    b.HasIndex("RequestDate")
                        .HasDatabaseName("IX_RequestLogs_RequestDate");

                    b.HasIndex("RequestStartTime")
                        .HasDatabaseName("IX_RequestLogs_RequestStartTime");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_RequestLogs_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_RequestLogs_UserId");

                    b.HasIndex("RequestDate", "ApiKeyId")
                        .HasDatabaseName("IX_RequestLogs_RequestDate_ApiKeyId");

                    b.HasIndex("RequestDate", "Model")
                        .HasDatabaseName("IX_RequestLogs_RequestDate_Model");

                    b.HasIndex("RequestDate", "UserId")
                        .HasDatabaseName("IX_RequestLogs_RequestDate_UserId");

                    b.HasIndex("RequestStartTime", "RequestHour")
                        .HasDatabaseName("IX_RequestLogs_RequestStartTime_RequestHour");

                    b.ToTable("RequestLogs", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsSystem")
                        .HasDatabaseName("IX_Roles_IsSystem");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.StatisticsSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ActiveAccountCount")
                        .HasColumnType("integer");

                    b.Property<int?>("ActiveApiKeyCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ApiKeyId")
                        .HasColumnType("uuid");

                    b.Property<double?>("AverageResponseTime")
                        .HasColumnType("double precision");

                    b.Property<long>("CacheCreateTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("CacheReadTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("FailedRequestCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("InputTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long?>("MaxResponseTime")
                        .HasColumnType("bigint");

                    b.Property<long?>("MinResponseTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("OutputTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int?>("RateLimitedAccountCount")
                        .HasColumnType("integer");

                    b.Property<long>("RequestCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<DateTime>("SnapshotDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SnapshotHour")
                        .HasColumnType("integer");

                    b.Property<string>("SnapshotType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("SuccessfulRequestCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<decimal>("TotalCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,6)")
                        .HasDefaultValue(0m);

                    b.Property<long>("TotalTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int?>("UniqueUserCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.HasKey("Id");

                    b.HasIndex("ApiKeyId")
                        .HasDatabaseName("IX_StatisticsSnapshots_ApiKeyId");

                    b.HasIndex("Model")
                        .HasDatabaseName("IX_StatisticsSnapshots_Model");

                    b.HasIndex("SnapshotDate")
                        .HasDatabaseName("IX_StatisticsSnapshots_SnapshotDate");

                    b.HasIndex("SnapshotType")
                        .HasDatabaseName("IX_StatisticsSnapshots_SnapshotType");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_StatisticsSnapshots_UserId");

                    b.HasIndex("SnapshotType", "SnapshotDate")
                        .HasDatabaseName("IX_StatisticsSnapshots_SnapshotType_SnapshotDate");

                    b.HasIndex("SnapshotType", "SnapshotDate", "ApiKeyId")
                        .HasDatabaseName("IX_StatisticsSnapshots_SnapshotType_SnapshotDate_ApiKeyId");

                    b.HasIndex("SnapshotType", "SnapshotDate", "Model")
                        .HasDatabaseName("IX_StatisticsSnapshots_SnapshotType_SnapshotDate_Model");

                    b.HasIndex("SnapshotType", "SnapshotDate", "SnapshotHour")
                        .HasDatabaseName("IX_StatisticsSnapshots_SnapshotType_SnapshotDate_SnapshotHour");

                    b.HasIndex("SnapshotType", "SnapshotDate", "UserId")
                        .HasDatabaseName("IX_StatisticsSnapshots_SnapshotType_SnapshotDate_UserId");

                    b.ToTable("StatisticsSnapshots", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("InvitationCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<Guid?>("InvitedByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Provider")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("InvitationCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_InvitationCode");

                    b.HasIndex("InvitedByUserId")
                        .HasDatabaseName("IX_Users_InvitedByUserId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_Users_RoleId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.HasIndex("Provider", "ProviderId")
                        .HasDatabaseName("IX_Users_Provider_ProviderId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.UserAccountBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BindingType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("private");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(50);

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("IX_UserAccountBindings_AccountId");

                    b.HasIndex("BindingType")
                        .HasDatabaseName("IX_UserAccountBindings_BindingType");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_UserAccountBindings_Priority");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserAccountBindings_UserId");

                    b.HasIndex("UserId", "AccountId")
                        .IsUnique()
                        .HasDatabaseName("UX_UserAccountBindings_User_Account");

                    b.HasIndex("UserId", "Priority", "IsActive")
                        .HasDatabaseName("IX_UserAccountBindings_User_Priority_Active");

                    b.ToTable("UserAccountBindings", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.UserLoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("LoginType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Success")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_UserLoginHistories_CreatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserLoginHistories_UserId");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("IX_UserLoginHistories_UserId_CreatedAt");

                    b.ToTable("UserLoginHistories", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastRechargedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("active");

                    b.Property<decimal>("TotalRecharged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LastUsedAt")
                        .HasDatabaseName("IX_Wallets_LastUsedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Wallets_Status");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Wallets_UserId");

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ExternalTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("RequestLogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("completed");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("WalletId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_WalletTransactions_CreatedAt");

                    b.HasIndex("RequestLogId")
                        .IsUnique()
                        .HasDatabaseName("IX_WalletTransactions_RequestLogId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_WalletTransactions_Status");

                    b.HasIndex("TransactionType")
                        .HasDatabaseName("IX_WalletTransactions_TransactionType");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("IX_WalletTransactions_WalletId");

                    b.HasIndex("WalletId", "CreatedAt")
                        .HasDatabaseName("IX_WalletTransactions_WalletId_CreatedAt");

                    b.ToTable("WalletTransactions", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.Accounts", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.User", "Owner")
                        .WithMany("OwnedAccounts")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.ApiKey", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.User", "User")
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.AuditLog", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.InvitationRecord", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaudeCodeProxy.Domain.User", "InviterUser")
                        .WithMany()
                        .HasForeignKey("InviterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedUser");

                    b.Navigation("InviterUser");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.RedeemCode", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClaudeCodeProxy.Domain.User", "UsedByUser")
                        .WithMany()
                        .HasForeignKey("UsedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UsedByUser");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.RequestLog", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.ApiKey", "ApiKey")
                        .WithMany("RequestLogs")
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaudeCodeProxy.Domain.User", "User")
                        .WithMany("RequestLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.StatisticsSnapshot", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.ApiKey", "ApiKey")
                        .WithMany()
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ClaudeCodeProxy.Domain.User", "User")
                        .WithMany("StatisticsSnapshots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApiKey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.User", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.User", "InvitedByUser")
                        .WithMany("InvitedUsers")
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ClaudeCodeProxy.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InvitedByUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.UserAccountBinding", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.Accounts", "Account")
                        .WithMany("UserBindings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaudeCodeProxy.Domain.User", "User")
                        .WithMany("AccountBindings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.UserLoginHistory", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.User", "User")
                        .WithMany("LoginHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.Wallet", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("ClaudeCodeProxy.Domain.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.WalletTransaction", b =>
                {
                    b.HasOne("ClaudeCodeProxy.Domain.RequestLog", "RequestLog")
                        .WithOne("WalletTransaction")
                        .HasForeignKey("ClaudeCodeProxy.Domain.WalletTransaction", "RequestLogId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ClaudeCodeProxy.Domain.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestLog");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.Accounts", b =>
                {
                    b.Navigation("UserBindings");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.ApiKey", b =>
                {
                    b.Navigation("RequestLogs");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.RequestLog", b =>
                {
                    b.Navigation("WalletTransaction");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.User", b =>
                {
                    b.Navigation("AccountBindings");

                    b.Navigation("ApiKeys");

                    b.Navigation("InvitedUsers");

                    b.Navigation("LoginHistories");

                    b.Navigation("OwnedAccounts");

                    b.Navigation("RequestLogs");

                    b.Navigation("StatisticsSnapshots");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ClaudeCodeProxy.Domain.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
